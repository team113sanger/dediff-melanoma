# This template estimates contamination in a single malignant (tumour or dedifferentiated tumour) sample BAM file using GATK CalculateContamination.
# Alastair Droop, 2019-05-07

import json
import os
import os.path

# Generate the submission section:
section('{PROJECT_ID}-CONTAMINATION-{SAMPLE}-{STYPE}', description='Calculates contamination for project {PROJECT_ID} ({PROJECT_SLUG}) sample {SAMPLE} vs {STYPE}')
options('-R "select[mem>{MUTECT2_TO_MAX_MEM}] rusage[mem={MUTECT2_TO_MAX_MEM}]" -M {MUTECT2_TO_MAX_MEM}')
options('-R "span[hosts=1]" -n{MUTECT2_TO_MAX_CPU}')
options('-q "{MUTECT2_QUEUE}"')
outputs('{LOG_DIR}')

# Make sure that the sample directory is OK:
sample_base_dir = os.path.join('{SAMPLE_DIR}', '{SAMPLE}')
sample_log_dir = os.path.join(sample_base_dir, 'logs')
message('sample directory is %s' % sample_base_dir)
if not os.path.exists(sample_base_dir):
    message('sample directory does not exist; creating it')
    os.makedirs(sample_base_dir)
if not os.path.exists(sample_log_dir):
    message('sample log directory does not exist; creating it')
    os.makedirs(sample_log_dir)

# Read the samples.json file to determine the BAM input files:
bams = []
with open('{SAMPLE_MAP}', 'r') as map_file:
    sample_map = json.loads(map_file.read())
    if '{SAMPLE}' not in sample_map.keys(): raise Exception('sample {SAMPLE} not in sample map')
    if '{STYPE}' not in sample_map['{SAMPLE}'].keys(): raise Exception('no {STYPE} for sample {SAMPLE}')
    for s in sample_map['{SAMPLE}']['{STYPE}']:
        bams.append('{SAMPLE_BAM_FILESTEM}' % (s, s))
message('Using %d input BAM(s):' % len(bams))
for i in bams: message('  %s' % i)

# Display and check the inputs:
if len(bams) == 0: raise Exception('at least 1 sample BAM required')

# Build the output files:
pileup_file = '{SAMPLE_DIR}/{SAMPLE}/{SAMPLE}-{STYPE}-pileup-summary.data'
contamination_file = '{SAMPLE_DIR}/{SAMPLE}/{SAMPLE}-{STYPE}-contamination.data'
message('writing pileup summary to %s' % pileup_file)
message('writing contamination table to %s' % contamination_file)

# Submit the commands:
command('module load ISG/jre/1.8.0_131', name='modload_java', log=True, test=False)
command('{GATK_EXEC} GetPileupSummaries -R {CANAPPS_REF_FASTA} -L {BAITSET_BED}  -V {GERMLINE_VCF} -I %s -O %s &> %s/GATK-pileup-{SAMPLE}-{STYPE}.log' % (' -I '.join(bams), pileup_file, sample_log_dir), name='run_pileup')
command('{GATK_EXEC} CalculateContamination -I %s -O %s &> %s/GATK-contamination-{SAMPLE}-{STYPE}.log' % (pileup_file, contamination_file, sample_log_dir), name='calc_contamination')

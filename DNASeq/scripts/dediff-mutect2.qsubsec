section('{PROJECT_ID}-MUTECT2-{SAMPLE}-{DTYPE}', description='Run Mutect2 for sample {SAMPLE} normal-vs-{DTYPE} for project {PROJECT_ID}')
options('-R "select[mem>{MEM_MAX}] rusage[mem={MEM_MAX}]" -M {MEM_MAX}')
options('-R "span[hosts=1]" -n{CPU_MAX}')
options('-q "{QUEUE}"')
outputs('{LOG_DIR}')

# Pull out the sample type:
disease_type = '{DTYPE}'.lower()
if disease_type not in ['tumour', 'dediff']: raise Exception('invalid disease type %s' % disease_type)

# Define the disease type string for use in filenames:
if disease_type == 'tumour': disease_str = 'NT'
else: disease_str = 'ND'

# Import the JSON sample map and find the malignant and normal sample IDs:
import json
sample_types = ['normal', 'malignant']
all_samples = set()
with open('{SAMPLE_MAP}', 'r') as map_file:
    sample_map = json.loads(map_file.read())
    if '{SAMPLE}' not in sample_map.keys(): raise Exception('sample {SAMPLE} not in sample map')
    if disease_type not in sample_map['{SAMPLE}'].keys(): raise Exception('sample type %s not in sample map data for sample {SAMPLE}' % disease_type)
    samples = sample_map['{SAMPLE}'][disease_type]
    for i in sample_types:
        if i not in samples.keys(): raise Exception('%s sample data missing for %s sample {SAMPLE}' % (i, disease_type))
        message('using %d %s sample(s): %s' % (len(samples[i]), i, ', '.join(samples[i])))
        for s in samples[i]:
            all_samples.add(s)

# Create the sample directory:
command('mkdir -p {SAMPLE_DIR}/{SAMPLE}/logs', name='mkdir_sampledir')

# Check that required files are present:
for f in all_samples: require('{INPUT_DIR}/%s.bam' % f, 'PATH_READABLE')
require('{GATK_IMAGE}', 'PATH_READABLE')
require('{CANAPPS_REF}', 'PATH_READABLE')
require('{CANAPPS_BAITSET}', 'PATH_READABLE')
require('{GERMLINE_VCF}', 'PATH_READABLE')
require('{PON_VCF}', 'PATH_READABLE')
require('{PON_VCF}.tbi', 'PATH_READABLE')

# Define the output file names:
artifact_filename = '{SAMPLE_DIR}/{SAMPLE}/{SAMPLE}%s-orientation-artifacts.tar.gz' % (disease_str)
output_filename = '{SAMPLE_DIR}/{SAMPLE}/{SAMPLE}%s-mutect.vcf.gz' % (disease_str)
log_filename = '{SAMPLE_DIR}/{SAMPLE}/logs/{SAMPLE}%s-mutect.log' % (disease_str)

# Build the Mutect2 command line:
cmd = ['gatk Mutect2']
cmd.append('--native-pair-hmm-threads {CPU_MAX}') # Set maximum CPU count
cmd.append('-R {CANAPPS_REF}') # The reference FASTA
cmd.append('-L {CANAPPS_BAITSET}') # The reference bait set used
cmd.append('--germline-resource {GERMLINE_VCF}') # The germline VCF data from gnomad
cmd.append('--panel-of-normals {PON_VCF}') # The PON to use (from Ingrid's project)
cmd.append('--f1r2-tar-gz %s' % (artifact_filename)) # The read orientation artifact file to generate
for s in all_samples: cmd.append('-I {INPUT_DIR}/%s.bam' % (s)) # The input BAM files
for s in samples['normal']: cmd.append('-normal %s' % (s)) # Define which inputs are normal
cmd.append('-O %s' % (output_filename)) # Define the output VCF
cmd.append('&> %s' % (log_filename)) # Reditect to mutect logfile
cmd = ' '.join(cmd)

# Run Mutect2 via singularity:
command('module load {SINGULARITY_MODULE}', name='modload_singularity')
command('singularity exec {GATK_IMAGE} %s' % (cmd), name='run_mutect2')

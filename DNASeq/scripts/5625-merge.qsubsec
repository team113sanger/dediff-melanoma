# Load the sample map JSON and determine the normal / and tumour:
# NB: bcftools prior to July 2018 does not allow for strings in FORMAT header sections.
# Thus, for this to work with Mutect2 data, we need to use a much newer version of bcftools

if '{USE_PON}' == 'yes':
    section_id = '{PROJECT_ID}-MERGE-PON'
    section_desc = 'Merge all {PROJECT_ID} ({PROJECT_SLUG}) samples (with PON)'
else:
    section_id = '{PROJECT_ID}-MERGE-NOPON'
    section_desc = 'Merge all {PROJECT_ID} ({PROJECT_SLUG}) samples (without PON)'

section(section_id, description=section_desc)
options('-R "select[mem>{MUTECT2_TO_MAX_MEM}] rusage[mem={MUTECT2_TO_MAX_MEM}]" -M {MUTECT2_TO_MAX_MEM}')
options('-R "span[hosts=1]" -n{MUTECT2_TO_MAX_CPU}')
options('-q "{MUTECT2_QUEUE}"')
outputs('{LOG_DIR}')

# Define the file we're looking for:
if '{USE_PON}' == 'yes':
    input_file_stem = '{SAMPLE_DIR}/%s/%s-normal_vs_%s-annotated.vcf.gz'
    output_file = '{MERGED_DIR}/{PROJECT_ID}-merged.vcf.gz'
    filtered_file = '{MERGED_DIR}/{PROJECT_ID}-filtered-merged.vcf.gz'
else:
    input_file_stem = '{SAMPLE_DIR}/%s/%s-normal_vs_%s-annotated-no-pon.vcf.gz'
    output_file = '{MERGED_DIR}/{PROJECT_ID}-merged-no-pon.vcf.gz'
    filtered_file = '{MERGED_DIR}/{PROJECT_ID}-filtered-merged-no-pon.vcf.gz'

# Load the sample JSON file to get the sample IDs:
import json
samples = dict()
samples['tumour'] = []
samples['dediff'] = []
with open('{SAMPLE_MAP}', 'r') as map_file:
    sample_map = json.loads(map_file.read())
    for s in sample_map.keys():
        for stype in ['tumour', 'dediff']:
            if stype not in sample_map[s].keys(): raise Exception('no %s for sample %s' % (stype, s))
            if len(sample_map[s][stype]) > 0:
                input_file = input_file_stem % (s, s, stype)
                message('merging %s sample %s from %s' % (stype, s, input_file))
                require(input_file, 'PATH_READABLE')
                samples[stype].append(input_file)

# Build the input file list:
all_samples = ' '.join([' '.join(samples[i]) for i in ['tumour', 'dediff']])

# Submit the merge command:
command('module load common-apps/bcftools/1.9-220', name='modload_bcftools')
command('{BCF_EXEC} merge --threads {MUTECT2_TO_MAX_CPU} --apply-filters "PASS,." --filter-logic "+" --force-samples --merge none --output-type z --output %s %s' % (output_file, all_samples), name='vcf_merge')
command('{BCF_EXEC} index --tbi --threads {MUTECT2_TO_MAX_CPU} %s' % (output_file), name='vcf_index')

# Split the samples into individual files:
command('module load ISG/R/3.6.1', name='modload_r')
command('Rscript {SCRIPT_DIR}/snp-tools/split-vcf.R {SAMPLE_DIR} {METADATA_DIR}/samples.json {SPLIT_DIR}', name='vcf_split')
command('{BCF_EXEC} merge --threads {MUTECT2_TO_MAX_CPU} --apply-filters "PASS,." --filter-logic "+" --force-samples --merge none --output-type z --output %s {SPLIT_DIR}/*.vcf.bgz' % (filtered_file), name='vcf_merge2')
command('{BCF_EXEC} index --tbi --threads {MUTECT2_TO_MAX_CPU} %s' % (filtered_file), name='vcf_index2')

section('{PROJECT_ID}-ORIENTATIONMODEL-{SAMPLE}-{DTYPE}', description='Run GATK LearnReadOrientationModel for sample {SAMPLE} normal-vs-{DTYPE} for project {PROJECT_ID}')
options('-R "select[mem>{MEM_MAX}] rusage[mem={MEM_MAX}]" -M {MEM_MAX}')
options('-R "span[hosts=1]" -n{CPU_MAX}')
options('-q "{QUEUE}"')
outputs('{LOG_DIR}')

# Pull out the sample type:
disease_type = '{DTYPE}'.lower()
if disease_type not in ['tumour', 'dediff']: raise Exception('invalid disease type %s' % disease_type)

# Define the disease type string for use in filenames:
if disease_type == 'tumour': disease_str = 'NT'
else: disease_str = 'ND'

# Define the output file names:
artifact_filename = '{SAMPLE_DIR}/{SAMPLE}/{SAMPLE}%s-orientation-artifacts.tar.gz' % (disease_str)
output_filename = '{SAMPLE_DIR}/{SAMPLE}/{SAMPLE}%s-orientation-model.tar.gz' % (disease_str)
log_filename = '{SAMPLE_DIR}/{SAMPLE}/logs/{SAMPLE}%s-orientation-model.log' % (disease_str)

# Check that required files are present:
require(artifact_filename, 'PATH_READABLE')

# Build the command line:
cmd = ['gatk LearnReadOrientationModel']
cmd.append('-I %s' % artifact_filename) # The input artifact file
cmd.append('-O %s' % output_filename) # The output model file
cmd.append('&> %s' % (log_filename)) # Reditect to logfile
cmd = ' '.join(cmd)

# Run Mutect2 via singularity:
command('module load {SINGULARITY_MODULE}', name='modload_singularity')
command('singularity exec {GATK_IMAGE} %s' % (cmd), name='run_orientationmodel')
